parameters:
  - name: storage_account_name
    type: string

  - name: storageAccountKey
    type: string

  - name: planContainerName
    type: string

  - name: userEmail
    type: string
    default: ""

  - name: deploymentRepo
    type: string

  - name: configRepo
    type: string
    default: "self"

  - name: deploymentPath
    type: string

  - name: configPath
    type: string

  - name: backend_container_name
    type: string

  - name: backend_key
    type: string

  - name: backend_resource_group_name
    type: string

stages:
  - stage: plan
    displayName: "Terraform Deployment"
    jobs:
      - job: terraformInitAndPlan
        displayName: "Terraform Plan"
        steps:
          - checkout: ${{ parameters.deploymentRepo }}
          - checkout: ${{ parameters.configRepo }}

          - script: |
              if  ! command -v terraform &> /dev/null
              then
                  echo "Terraform could not be found"
                  echo "Installing Terraform"
                  wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                  sudo apt update && sudo apt install terraform
              else
                  echo "Terraform is already installed"
              fi
              terraform -version

            displayName: "Installing terraform"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"
              addSpnToEnvironment: true
            displayName: "Azure login"

          - script: |
              cp ${{parameters.configPath}} ${{parameters.deploymentPath}}
            displayName: "Copying configuration files"

          - script: |
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              echo "Planning Terraform"
              cd ${{parameters.deploymentPath}}

              # Terraform init
              terraform init -backend-config="storage_account_name=${{ parameters.storage_account_name }}" -backend-config="container_name=${{ parameters.backend_container_name }}" -backend-config="key=${{ parameters.backend_key }}" -backend-config="resource_group_name=${{ parameters.backend_resource_group_name }}" 

              terraform validate
              ls
              echo "Terrform initialized"
              echo "Planning Terraform"
              terraform plan -out=tfplan
              terraform plan > planout.txt
              echo "Terraform planned"
            displayName: "Initializing terraform and Planning"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Uploading plan file to Azure blob storage"
                az storage blob upload --container-name ${{parameters.planContainerName}} --file $(System.DefaultWorkingDirectory)/${{parameters.deploymentPath}}/planout.txt --name $(Build.BuildId)-planout.txt --account-name ${{parameters.storage_account_name}} --account-key ${{parameters.storageAccountKey}}
                az storage blob upload --container-name ${{parameters.planContainerName}} --file $(System.DefaultWorkingDirectory)/${{parameters.deploymentPath}}/tfplan --name $(Build.BuildId)-tfplan --account-name ${{parameters.storage_account_name}} --account-key ${{parameters.storageAccountKey}}
                echo "Plan file uploaded"
              addSpnToEnvironment: true
            displayName: "Uploading Plan Files"

      - job: waitForValidation
        dependsOn: terraformInitAndPlan
        displayName: Manual Validation
        pool: server
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: |
                ${{parameters.userEmail}}
              instructions: "visit the Azure DevOps pipeline and validate the terraform plan, link: https://portal.azure.com/#view/Microsoft_Azure_Storage/ContainerMenuBlade/~/overview/storageAccountId/%2Fsubscriptions%2F38785beb-5019-4896-8679-3d41ddacc4b1%2FresourceGroups%2Frnd-charindut-isuru%2Fproviders%2FMicrosoft.Storage%2FstorageAccounts%2Fcharindutisurug/path/terraform-plans/etag/%220x8DC70BE4CA6E466%22/defaultEncryptionScope/%24account-encryption-key/denyEncryptionScopeOverride~/false/defaultId//publicAccessVal/None"
              onTimeout: "resume"

      - job: terraformApply
        dependsOn: waitForValidation
        displayName: "Terraform Apply"
        steps:
          - checkout: ${{ parameters.deploymentRepo }}
          - checkout: ${{ parameters.configRepo }}

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;issecret=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;issecret=true]$(az account show --query 'id' -o tsv)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;issecret=true]${tenantId}"

                # get the plan file from Azure blob storage
                az storage blob download --container-name ${{parameters.planContainerName}} --name $(Build.BuildId)-tfplan --file $(System.DefaultWorkingDirectory)/${{parameters.deploymentPath}}/tfplan --account-name ${{parameters.storage_account_name}} --account-key ${{parameters.storageAccountKey}}
                az storage blob download --container-name ${{parameters.planContainerName}} --name $(Build.BuildId)-planout.txt --file $(System.DefaultWorkingDirectory)/${{parameters.deploymentPath}}/planout.txt --account-name ${{parameters.storage_account_name}} --account-key ${{parameters.storageAccountKey}}

                # create a snapshot of the terraform state file in Azure blob storage
                az storage blob snapshot --container-name ${{parameters.backend_container_name}} --name ${{parameters.backend_key}} --account-name ${{parameters.storage_account_name}} --account-key ${{parameters.storageAccountKey}}
              addSpnToEnvironment: true
            displayName: "Azure login"

          - script: |
              echo "Setting up Terraform environment variables"
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              cd ${{parameters.deploymentPath}}

              # Terraform init
              terraform init -backend-config="storage_account_name=${{ parameters.storage_account_name }}" -backend-config="container_name=${{ parameters.backend_container_name }}" -backend-config="key=${{ parameters.backend_key }}" -backend-config="resource_group_name=${{ parameters.backend_resource_group_name }}" 

              terraform validate
              ls
              echo ""
              echo "Terraform environment variables set"
              echo "Applying Terraform"
              terraform apply tfplan
              echo "Terraform applied"

            displayName: "Applying Terraform"

          - task: AzureCLI@2
            inputs:
              azureSubscription: "TF"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                # remove tfplan file and planout.txt file from Azure blob storage
                az storage blob delete --container-name ${{parameters.planContainerName}} --name $(Build.BuildId)-tfplan --account-name ${{parameters.storage_account_name}} --account-key ${{parameters.storageAccountKey}}
                az storage blob delete --container-name ${{parameters.planContainerName}} --name $(Build.BuildId)-planout.txt --account-name ${{parameters.storage_account_name}} --account-key ${{parameters.storageAccountKey}}
              addSpnToEnvironment: true
            displayName: "Deleting plan files from Azure blob storage"
